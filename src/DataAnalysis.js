import React, { Component, createRef, useState, useEffect, useMemo, useCallback } from "react";

import  "./ShowResults.css";
import Plot from 'react-plotly.js'

import {find_local_maxima, filter_by_distance} from './findpeaks.js'
import { average, getStandardDeviation, lowPassFilter, difftoNumber} from "./utils";
import { toHaveDescription, toHaveStyle } from "@testing-library/jest-dom/dist/matchers";
// import filter from "plotly.js/lib/filter";

// const lowPassFilter = require('low-pass-filter').lowPassFilter;



class DataAnalysis extends Component {
    constructor(props) {
        super(props);
        this.state = {
            isMarkUp : false,
            revision : 0,
            isAddNewPeakHigh : false,
            isAddNewPeakLow : false,
        }

        this.canvasRef = createRef();
        this.sliderLeftRef = createRef();
        this.sliderRightRef = createRef();
        this.plotLet = createRef();
        this.plotRight = createRef();
        this.labelLeft = createRef();
        this.labelRight = createRef();
        this.inputFile = createRef();

        this.dataLeft = []
        this.timeStampLeft = []
        this.dataRight = []
        this.timeStampRight = []

        this.frameRate = this.props.frameRate
        this.fileName = this.props.fileName
        this.leftHigh = {}
        this.leftLow = {}
        this.rightHigh = {}
        this.rightLow = {}

        this.selectedPointRight = {}
        this.selectedPointLeft = {}

        this.newPeak = {}
    }


    componentDidMount = () => {

        document.addEventListener('keydown', this.handleKeyDown);
        document.addEventListener("keyup", (event) => {
            if (event.isComposing || event.code === 229) {
              return;
            }
            this.handleKeyUp(event)
          });

        // set labels 
        this.labelLeft.current.innerHTML = this.sliderLeftRef.current.value + 's'
        this.labelRight.current.innerHTML = this.sliderRightRef.current.value + 's'

        //this.handleProcessInputData()
       // this.handleCreatePredefinedData()
       // this.handleFilterData()
        //this.handleFindPeaksinData()
    }

    componentWillUnmount = () => {
        window.addEventListener('beforeunload', (event) => {
            event.preventDefault();
            document.removeEventListener('keydown', this.handleKeyPress);
            console.log('unmounting')
       })
    }

    handleKeyUp = (event) => {
        switch(event.code) {
            case 'KeyQ' :
                this.setState({isAddNewPeakHigh : false})
                break;
            case 'KeyA' :
                this.setState({isAddNewPeakLow : false})
                break;
            default: 
                break;
        }
    }

    handleKeyDown = (event) => {
        // Handle key press
        // console.log('code-down', event.code)
        switch (event.code) {
            case 'Backspace':
                    if (this.state.isMarkUp){
                        //find and remove the appropiate element in the array
                        if (this.selectedPointRight.name === 'Right Hand Peaks High'){
                            this.rightHigh.peaksValues.splice(this.selectedPointRight.idx, 1);
                            this.rightHigh.peaksTimes.splice(this.selectedPointRight.idx, 1);
                        }
                        if (this.selectedPointRight.name === 'Right Hand Peaks Low'){
                            this.rightLow.peaksValues.splice(this.selectedPointRight.idx, 1);
                            this.rightLow.peaksTimes.splice(this.selectedPointRight.idx, 1);
                        }
                        if (this.selectedPointLeft.name === 'Left Hand Peaks High'){
                            this.leftHigh.peaksValues.splice(this.selectedPointLeft.idx, 1);
                            this.leftHigh.peaksTimes.splice(this.selectedPointLeft.idx, 1);
                        }
                        if (this.selectedPointLeft.name === 'Left Hand Peaks Low'){
                            this.leftLow.peaksValues.splice(this.selectedPointLeft.idx, 1);
                            this.leftLow.peaksTimes.splice(this.selectedPointLeft.idx, 1);
                        }

                        // reset point
                        this.selectedPointRight = {}
                        this.selectedPointLeft = {}
                        this.setState({isMarkUp : false})
                        this.setState({revision : this.state.revision + 1})
                } 
                break;
            case 'Escape' :
                if (this.state.isMarkUp){
                    // reset point
                    this.selectedPointRight = {}
                    this.selectedPointLeft = {}
                    this.setState({isMarkUp : false})
                    this.setState({revision : this.state.revision + 1})
                }
                break;
            case 'KeyQ' :
                this.setState({isAddNewPeakHigh : true})
                break;
            case 'KeyA' :
                this.setState({isAddNewPeakLow : true})
                break;
        //         if (this.state.isAddNewPeak) {
        //             if (this.newPeak.curveName === 'Right Hand') {

        //                 if ((this.rightHigh.peaksValues.length > 0) && ((this.rightLow.peaksValues.length > 0)))
        //                 {   

        //                 }


        //                 this.rightHigh = {}
        // this.rightLow = {}

        //             }
        //             if (this.newPeak.curveName === 'Left Hand') {

        //             }
        //         }
            default:
                break;
        }

    }

    handleProcessInputData = () => {

        var tempData = this.props.distanceThumbIndex
        tempData.forEach(element => {

            if ((element.leftDistance.length >0) && (element.rightDistance.length === 0)) {
                this.dataLeft = element.leftDistance
                this.timeStampLeft = element.leftTimeStamp
            }

            if ((element.leftDistance.length === 0) && (element.rightDistance.length > 0)) {
                this.dataRight = element.rightDistance
                this.timeStampRight = element.rightTimeStamp
            }


            if ((element.leftDistance.length >0) && (element.rightDistance.length >0)) {

            var meanLeft = average(element.leftDistance)
            var stdLeft = getStandardDeviation(element.leftDistance)

            var meanRight = average(element.rightDistance)
            var stdRight = getStandardDeviation(element.rightDistance)
            if ((stdLeft > stdRight) && (meanLeft > meanRight)){
                this.dataLeft = element.leftDistance
                this.timeStampLeft = element.leftTimeStamp
            } else {
                this.dataRight = element.rightDistance
                this.timeStampRight = element.rightTimeStamp
            }

            }
            
        });
    }

    handleCreatePredefinedData = () => {

        this.frameRate = 60;
        this.fileName ='elvideo.mp4'

        this.dataLeft = [
            0.09273362571452078,
            0.09352382120519905,
            0.09345615516331639,
            0.09450636852187544,
            0.09543222276430739,
            0.0951286718314427,
            0.09615917871343628,
            0.09544355284567396,
            0.09714782780984119,
            0.09809773781240441,
            0.09847397016965649,
            0.09628338203185724,
            0.09410212742008602,
            0.09214033535393203,
            0.0882974438297148,
            0.08181396780792215,
            0.06348627494307417,
            0.03421642571236707,
            0.03231673352760531,
            0.032199095651084586,
            0.03227593603149864,
            0.03546422921474127,
            0.0336132491970517,
            0.03346483412713364,
            0.03493181034246842,
            0.03568759891716029,
            0.036454642507768024,
            0.0495899323945604,
            0.06377680105766705,
            0.0749553665902204,
            0.08513144111469774,
            0.09279734637586798,
            0.09713758184677643,
            0.0990622541838605,
            0.1006362532131432,
            0.10089871932612872,
            0.1024008144995413,
            0.1031632635710124,
            0.09959273726423475,
            0.09130929382279285,
            0.07266742823273442,
            0.040626242595167936,
            0.036405022720553654,
            0.034966232285986304,
            0.036676540983524804,
            0.03637602020977136,
            0.037217874015628774,
            0.03634677671513102,
            0.037480716283987095,
            0.037460504702867686,
            0.04476409706584733,
            0.06337777584676295,
            0.07501145560399287,
            0.08345595959628128,
            0.08724301170040331,
            0.09088732471321435,
            0.09401598436127907,
            0.09574549111255488,
            0.09669821326680246,
            0.09787484998452292,
            0.09901098173933347,
            0.09905031701942886,
            0.09878859715092406,
            0.09885042701034964,
            0.09212660115679622,
            0.07404232520870675,
            0.03867481120241041,
            0.036037857620093205,
            0.039535850796208465,
            0.03945486263303732,
            0.03732663613789999,
            0.03887922242167465,
            0.03922243057487713,
            0.03911073604915105,
            0.03576433981841047,
            0.038805444693630745,
            0.052167214694476216,
            0.07036933080204046,
            0.07976565532976677,
            0.08858046192809092,
            0.09171486837960595,
            0.09590065046911589,
            0.0959516058411389,
            0.09748276152410365,
            0.0973258899608146,
            0.09728696761507624,
            0.09707624063114234,
            0.09431853974359661,
            0.08102384592087095,
            0.049441558165040214,
            0.04234828198599901,
            0.03859054027298415,
            0.04193348462673192,
            0.043447698028365386,
            0.0431181578090658,
            0.040612260495373934,
            0.03625429768980059,
            0.03651731757685552,
            0.039016255107086534,
            0.04490994330800479,
            0.06234707288883836,
            0.0764826797419373,
            0.08401653207213945,
            0.08533253951917641,
            0.09111525215066152,
            0.09554113562408059,
            0.09417979718722443,
            0.0940136627913993,
            0.09636827381778815,
            0.09651673551345724,
            0.09650354338386437,
            0.09386237548829264,
            0.08321000902342258,
            0.05082721797624678,
            0.03766947046835438,
            0.03583551236277948,
            0.04510499405669484,
            0.04675081673744021,
            0.047689019305738566,
            0.04355138283685367,
            0.040179362791067263,
            0.037932813682360476,
            0.036308584547348116,
            0.037003044182325716,
            0.05117533961005767,
            0.06759703683610348,
            0.08257389411382438,
            0.09098326988384708,
            0.09521673472431512,
            0.09748587735568072,
            0.09880930584243137,
            0.09910707255854652,
            0.09978491966463354,
            0.09999428693240853,
            0.09944771945591833,
            0.08771741326076408,
            0.0713765697780899,
            0.04095198682077157,
            0.040215524349781026,
            0.041939245332103456,
            0.04168884304420936,
            0.04474767235587007,
            0.039046920605517496,
            0.04266593087009546,
            0.04050431148151772,
            0.038443663268658126,
            0.03954768684939947,
            0.05164751414764722,
            0.07110321271409656,
            0.08464637824793428,
            0.09148580123100834,
            0.09324066341892268,
            0.0944981589631249,
            0.09588230661903195,
            0.09620446951800146,
            0.09662563665055142,
            0.09652025565431137,
            0.09725663168066932,
            0.09583002135060693,
            0.08392923095746772,
            0.060154354362984636,
            0.03853165646076025,
            0.03560816072569678,
            0.0424565909663263,
            0.04050805556120621,
            0.04389485984447307,
            0.04106393174712425,
            0.0442577634000511,
            0.03874175283182339,
            0.03906026298640938,
            0.03771244484467835,
            0.04666817146463495,
            0.058014333493018364,
            0.07535213907274502,
            0.08489161279177139,
            0.09111117142201422,
            0.09333551571105242,
            0.09216706375327251,
            0.09289841529454099,
            0.09346508616484991,
            0.09334737314909979,
            0.09081348503605675,
            0.07953026364817932,
            0.04795153135654427,
            0.03763079206620742,
            0.035601554806692484,
            0.038341740788398755,
            0.03803915733727063,
            0.038287913666455176,
            0.03898319787906733,
            0.041142175592261604,
            0.03917150199043133,
            0.03897711978764218,
            0.035828510207745745,
            0.03924845957398576,
            0.05209461758887286,
            0.06349601741265712,
            0.07446346293314737,
            0.08193230242475211,
            0.09139972975885055,
            0.09338664363606275,
            0.09312179684508456,
            0.09326541457654383,
            0.09495810049528228,
            0.0956120370109691,
            0.09356791163936115,
            0.08696186422262416,
            0.07416639424192087,
            0.04189688832028287,
            0.03767140606158265,
            0.036314174716937944,
            0.038565944366028296,
            0.038583583947829785,
            0.03911361883280582,
            0.04267329263225362,
            0.04189189941863795,
            0.03963213207386437,
            0.03885193682793227,
            0.04192176685301252,
            0.05361243291441235,
            0.06984257230027809,
            0.07929482137302968,
            0.08702807472345868,
            0.09071885262129226,
            0.09231675126050634,
            0.09186331790784706,
            0.09191987500853716,
            0.09161337608011197,
            0.0894229483880301,
            0.08680952861608188,
            0.07047423040805831,
            0.0332799812271678,
            0.03207527883096103,
            0.03216381070404477,
            0.03844689108821234,
            0.03549023065563608,
            0.036851368374447024,
            0.037635736165846194,
            0.03593041733962994,
            0.03979235087911584,
            0.037360195187743,
            0.039013326036502656,
            0.04929171239569041,
            0.05897350244307457,
            0.0869936154839464,
            0.09082828510441279,
            0.09501688352288057,
            0.0985782249650319,
            0.09974531715425683,
            0.10036660148252631,
            0.10120001679585096,
            0.10272623225467516,
            0.10300629066387255,
            0.10205845419069311,
            0.10158487329937384,
            0.10186396656952952,
            0.10185368261144015,
            0.10079903060872904,
            0.10083616811844913,
            0.10156165545705047,
            0.10085978751630557,
            0.09955197290269618,
            0.09866173250901525,
            0.0959534181690275,
            0.09336355283981815,
            0.08876607037165467,
            0.08948042016391652,
            0.10008189492092982,
            0.062159085216350975
        ]
        this.timeStampLeft = [
            12.949778,
            12.966444,
            12.98311,
            12.999776,
            13.016442,
            13.033108,
            13.049774,
            13.06644,
            13.083106,
            13.099772,
            13.116438,
            13.133104,
            13.14977,
            13.166436,
            13.183102,
            13.199768,
            13.216434,
            13.2331,
            13.249766,
            13.266432,
            13.283098,
            13.299764,
            13.31643,
            13.333096,
            13.349762,
            13.366428,
            13.383094,
            13.39976,
            13.416426,
            13.433092,
            13.449758,
            13.466424,
            13.48309,
            13.499756,
            13.516422,
            13.533088,
            13.549754,
            13.56642,
            13.583086,
            13.599752,
            13.616418,
            13.633084,
            13.64975,
            13.666416,
            13.683082,
            13.699748,
            13.716414,
            13.73308,
            13.749746,
            13.766412,
            13.783078,
            13.799744,
            13.81641,
            13.833076,
            13.849742,
            13.866408,
            13.883074,
            13.89974,
            13.916406,
            13.933072,
            13.949738,
            13.966404,
            13.98307,
            13.999736,
            14.016402,
            14.033068,
            14.049734,
            14.0664,
            14.083066,
            14.099732,
            14.116398,
            14.133064,
            14.14973,
            14.166396,
            14.183062,
            14.199728,
            14.216394,
            14.23306,
            14.249726,
            14.266392,
            14.283058,
            14.299724,
            14.31639,
            14.333056,
            14.349722,
            14.366388,
            14.383054,
            14.39972,
            14.416386,
            14.433052,
            14.449718,
            14.466384,
            14.48305,
            14.499716,
            14.516382,
            14.533048,
            14.549714,
            14.56638,
            14.583046,
            14.599712,
            14.616378,
            14.633044,
            14.64971,
            14.666376,
            14.683042,
            14.699708,
            14.716374,
            14.73304,
            14.749706,
            14.766372,
            14.783038,
            14.799704,
            14.81637,
            14.833036,
            14.849702,
            14.866368,
            14.883034,
            14.8997,
            14.916366,
            14.933032,
            14.949698,
            14.966364,
            14.98303,
            14.999696,
            15.016362,
            15.033028,
            15.049694,
            15.06636,
            15.083026,
            15.099692,
            15.116358,
            15.133024,
            15.14969,
            15.166356,
            15.183022,
            15.199688,
            15.216354,
            15.23302,
            15.249686,
            15.266352,
            15.283018,
            15.299684,
            15.31635,
            15.333016,
            15.349682,
            15.366348,
            15.383014,
            15.39968,
            15.416346,
            15.433012,
            15.449678,
            15.466344,
            15.48301,
            15.499676,
            15.516342,
            15.533008,
            15.549674,
            15.56634,
            15.583006,
            15.599672,
            15.616338,
            15.633004,
            15.64967,
            15.666336,
            15.683002,
            15.699668,
            15.716334,
            15.733,
            15.749666,
            15.766332,
            15.782998,
            15.799664,
            15.81633,
            15.832996,
            15.849662,
            15.866328,
            15.882994,
            15.89966,
            15.916326,
            15.932992,
            15.949658,
            15.966324,
            15.98299,
            15.999656,
            16.016321,
            16.032986,
            16.049651,
            16.066317,
            16.082982,
            16.099647,
            16.116313,
            16.132978,
            16.149643,
            16.166308,
            16.182974,
            16.199639,
            16.216304,
            16.23297,
            16.249635,
            16.2663,
            16.282965,
            16.299631,
            16.316296,
            16.332961,
            16.349627,
            16.366292,
            16.382957,
            16.399622,
            16.416288,
            16.432953,
            16.449618,
            16.466284,
            16.482949,
            16.499614,
            16.516279,
            16.532945,
            16.54961,
            16.566275,
            16.582941,
            16.599606,
            16.616271,
            16.632936,
            16.649602,
            16.666267,
            16.682932,
            16.699598,
            16.716263,
            16.732928,
            16.749593,
            16.766259,
            16.782925,
            16.799591,
            16.816257,
            16.832923,
            16.849589,
            16.866255,
            16.882921,
            16.899587,
            16.916253,
            16.932919,
            16.949585,
            16.966251,
            16.982917,
            16.999583,
            17.016249,
            17.032915,
            17.049581,
            17.066247,
            17.082913,
            17.099579,
            17.116245,
            17.132911,
            17.149577,
            17.166243,
            17.182909,
            17.199575,
            17.216241,
            17.232907,
            17.249573,
            17.266239,
            17.282905,
            17.299571,
            17.316237,
            17.332903,
            17.349569,
            17.366235,
            17.382901,
            17.399567,
            17.416233
        ]
        this.dataRight = [
            0.08099203912315228,
            0.0741446867960452,
            0.07126133048770962,
            0.0693349533506924,
            0.06881539049922962,
            0.06635913949577973,
            0.06424009080012807,
            0.0639665567497773,
            0.0642049574224358,
            0.0638927802281572,
            0.06358391272356004,
            0.06381881747594721,
            0.06416353688884094,
            0.06511267070256553,
            0.06496389142458006,
            0.06409587961704705,
            0.05794136022454448,
            0.0476459158343136,
            0.034345292119834704,
            0.03267556817503054,
            0.035669527271420004,
            0.034799266599515585,
            0.034792920587476,
            0.03650371113300937,
            0.03667766479796057,
            0.03490595992973375,
            0.03578636419565224,
            0.03608886026596224,
            0.03567907909523334,
            0.03473550246227182,
            0.03483456045344589,
            0.03731421271742584,
            0.03448734087298435,
            0.041857139661193116,
            0.058971098902722625,
            0.07287143343553942,
            0.08542972107618144,
            0.09226017416353076,
            0.09439779455165989,
            0.09724128551148666,
            0.10092076442545582,
            0.10116468551645028,
            0.10213770246591347,
            0.10183932448902798,
            0.10085567929937637,
            0.10103642422224836,
            0.1006931673478231,
            0.0994820635925954,
            0.09301974317498274,
            0.07762502932497359,
            0.04616494353945248,
            0.03936634261701886,
            0.04037986109117951,
            0.03650865942463874,
            0.03859330980881523,
            0.03794316664612764,
            0.03716798403920989,
            0.037328770672357896,
            0.037274355822880245,
            0.037077730764675396,
            0.03732108029073261,
            0.03563963584714724,
            0.03527743581386382,
            0.034892188715005074,
            0.034878862837966186,
            0.03488816771203305,
            0.03430443805906784,
            0.05189122722889947,
            0.06711121571058547,
            0.07794716500654329,
            0.09031304340126257,
            0.09303863744301578,
            0.09487402785542107,
            0.09644996767678783,
            0.09871601179342655,
            0.09942198164422585,
            0.10129500869999292,
            0.10100735877613881,
            0.10197109119039971,
            0.10145222199037213,
            0.099809453885812,
            0.09564414166111194,
            0.0808781211802307,
            0.051856228105667174,
            0.032955753618514036,
            0.038775859609802066,
            0.03685220708880721,
            0.039557582819063235,
            0.03843766017166879,
            0.03991495824768023,
            0.03901411502524865,
            0.03752973087561445,
            0.03741190234907629,
            0.03624266101599521,
            0.04053346273200447,
            0.052456996609154795,
            0.06780414330104222,
            0.08123001282545624,
            0.08758448254279284,
            0.09292485424523676,
            0.09504381993277904,
            0.09551141616784607,
            0.09649777547817406,
            0.09765001783163131,
            0.09798694005848708,
            0.09675080464280646,
            0.0862915923875044,
            0.06382953624182351,
            0.041155466952801534,
            0.03808428589366688,
            0.039619307632682274,
            0.03929006391589494,
            0.039943546192247395,
            0.03936936474097722,
            0.040205333258303194,
            0.04043971776192937,
            0.03867284224981953,
            0.0358506423532992,
            0.03546845525186733,
            0.04335926168300438,
            0.05706435717517269,
            0.07087205094115141,
            0.08066690674184347,
            0.0871052610784196,
            0.08995542908563009,
            0.09339960283115943,
            0.09567520657575987,
            0.09738744859537021,
            0.0974938450628091,
            0.09710549054566997,
            0.09580356948204245,
            0.0914040286031152,
            0.07774910304886447,
            0.04626599219082031,
            0.03863167156496343,
            0.04088410954735749,
            0.04099289422550051,
            0.041358785360397894,
            0.04243061909972269,
            0.04202287149189628,
            0.039112716242076725,
            0.03776445927687365,
            0.035723428319752344,
            0.035575215614487954,
            0.03594087819849422,
            0.050938075651246875,
            0.0675491057197927,
            0.07922306423180693,
            0.08456136186032755,
            0.08856133494813566,
            0.09280013589079823,
            0.09342738460301757,
            0.0950696010912876,
            0.09506789268597501,
            0.09550834506567658,
            0.09435561809020648,
            0.09042627029206579,
            0.07606830446034799,
            0.0473573295923257,
            0.042228369808855075,
            0.04225667127773099,
            0.0419801083249583,
            0.04195942771455524,
            0.03880101874326047,
            0.03824138460634455,
            0.03809574228121624,
            0.038416596656123986,
            0.03842363198530824,
            0.036269078875713415,
            0.034867664030122134,
            0.044832181960678646,
            0.0561041067449193,
            0.07015381810850636,
            0.07792458687809185,
            0.08296763369679712,
            0.08642185698667894,
            0.09029961912163009,
            0.09362547215863619,
            0.09570959124843989,
            0.09535886804189365,
            0.094450786012279,
            0.09233496025432299,
            0.08383976532425269,
            0.0629249594608277,
            0.038041247176708905,
            0.03877576359993323,
            0.03946197617476075,
            0.038533858942751686,
            0.03903813993319521,
            0.039940972550070834,
            0.03935513950430221,
            0.037920062042889426,
            0.03741602234061324,
            0.034871612618687174,
            0.03742971745093729,
            0.04267317474628586,
            0.05421976438410859,
            0.06639122154493957,
            0.07283635221752749,
            0.07752076865741883,
            0.08102066037926572,
            0.084399643403498,
            0.08578952633186453,
            0.08730691921105431,
            0.088162225472412,
            0.08862659803434919,
            0.08967692458222914,
            0.0883097395839188,
            0.08440937150982906,
            0.0699156729158306,
            0.03932790296788438,
            0.037872514724721036,
            0.03783623792700719,
            0.03861333980483837,
            0.03956313293324142,
            0.040029995056406684,
            0.03977786471288064,
            0.040287725151888984,
            0.03968290745877945,
            0.03786033120851908,
            0.036795735367140855,
            0.04957446951890802,
            0.06598031929179256,
            0.07476983634492695,
            0.08336159397209984,
            0.0855944927828726,
            0.08811151392104044,
            0.08973307297152398,
            0.09012925082953017,
            0.09097034355521001,
            0.09132930312942512,
            0.09143759232648209,
            0.08669643650648413,
            0.07603048836028552,
            0.04526078655503404,
            0.0355985060392896,
            0.04147044721154787,
            0.040630703320539335,
            0.041920514415000464,
            0.04032508248061182,
            0.03980449470711472,
            0.042024154581995474,
            0.04048633204611433,
            0.03871423924944253,
            0.037200193989117766,
            0.03750707306264234,
            0.048282747898532465,
            0.06262451447282937,
            0.07425667877465013,
            0.08180985783685758,
            0.08562544517977869,
            0.08699401845725205,
            0.08861390303317897,
            0.09010103169357483,
            0.09040070467869593,
            0.09082972380868891,
            0.0910429327028007,
            0.08545912611559359,
            0.06882627122547916,
            0.041847480437947004,
            0.0375689779406057,
            0.03816523349085144,
            0.04055056077293495,
            0.04143568208035933,
            0.0398467089388433,
            0.03925294718439562,
            0.04061845455920057,
            0.03812463260624215,
            0.03836482820086588,
            0.048369710316784734,
            0.06732989904917687,
            0.07413846682807831,
            0.08043859671761952,
            0.08295305952333996,
            0.0844669110126975,
            0.08539727086072987,
            0.08680533164212062,
            0.0883774411897428,
            0.08816965741890864,
            0.08435344447178192,
            0.07018891896579948,
            0.04093968582763065,
            0.033828723540898414,
            0.037517475255063354,
            0.04019448911646614,
            0.039865533861763294,
            0.03895810491015316,
            0.03840082437113394,
            0.038135380677416494,
            0.03781352031247993,
            0.03743524864697544,
            0.035529441401795085,
            0.0471038867655465,
            0.06076990205566158,
            0.07032746175726774,
            0.0774579822874082,
            0.08095308395663275,
            0.08386259433265598,
            0.08629909273216517,
            0.08850590166352451,
            0.0895023415363543,
            0.09028652866787365,
            0.09062164155305082
        ]
        this.timeStampRight = [
            5.67078,
            5.687446,
            5.704112,
            5.720778,
            5.737444,
            5.75411,
            5.770776,
            5.787442,
            5.804108,
            5.820774,
            5.83744,
            5.854106,
            5.870772,
            5.887438,
            5.904104,
            5.92077,
            5.937436,
            5.954102,
            5.970768,
            5.987434,
            6.0041,
            6.020766,
            6.037432,
            6.054098,
            6.070764,
            6.08743,
            6.104096,
            6.120762,
            6.137428,
            6.154094,
            6.17076,
            6.187426,
            6.204092,
            6.220758,
            6.237424,
            6.25409,
            6.270756,
            6.287422,
            6.304088,
            6.320754,
            6.33742,
            6.354086,
            6.370752,
            6.387418,
            6.404084,
            6.42075,
            6.437416,
            6.454082,
            6.470748,
            6.487414,
            6.50408,
            6.520746,
            6.537412,
            6.554078,
            6.570744,
            6.58741,
            6.604076,
            6.620742,
            6.637408,
            6.654074,
            6.67074,
            6.687406,
            6.704072,
            6.720738,
            6.737404,
            6.75407,
            6.770736,
            6.787402,
            6.804068,
            6.820734,
            6.8374,
            6.854066,
            6.870732,
            6.887398,
            6.904064,
            6.92073,
            6.937396,
            6.954062,
            6.970728,
            6.987394,
            7.00406,
            7.020726,
            7.037392,
            7.054058,
            7.070724,
            7.08739,
            7.104056,
            7.120722,
            7.137388,
            7.154054,
            7.17072,
            7.187386,
            7.204052,
            7.220718,
            7.237384,
            7.25405,
            7.270716,
            7.287382,
            7.304048,
            7.320714,
            7.33738,
            7.354046,
            7.370712,
            7.387378,
            7.404044,
            7.42071,
            7.437376,
            7.454042,
            7.470708,
            7.487374,
            7.50404,
            7.520706,
            7.537372,
            7.554038,
            7.570704,
            7.58737,
            7.604036,
            7.620702,
            7.637368,
            7.654034,
            7.6707,
            7.687366,
            7.704032,
            7.720698,
            7.737364,
            7.75403,
            7.770696,
            7.787362,
            7.804028,
            7.820694,
            7.83736,
            7.854026,
            7.870692,
            7.887358,
            7.904024,
            7.92069,
            7.937356,
            7.954022,
            7.970688,
            7.987354,
            8.00402,
            8.020686,
            8.037352,
            8.054017,
            8.070683,
            8.087349,
            8.104015,
            8.12068,
            8.137346,
            8.154012,
            8.170678,
            8.187343,
            8.204008,
            8.220674,
            8.23734,
            8.254006,
            8.270671,
            8.287337,
            8.304003,
            8.320669,
            8.337334,
            8.353999,
            8.370665,
            8.387331,
            8.403997,
            8.420663,
            8.437329,
            8.453995,
            8.470661,
            8.487327,
            8.503993,
            8.520659,
            8.537325,
            8.553991,
            8.570657,
            8.587323,
            8.603989,
            8.620655,
            8.637321,
            8.653987,
            8.670653,
            8.687319,
            8.703985,
            8.720651,
            8.737317,
            8.753983,
            8.770649,
            8.787315,
            8.803981,
            8.820647,
            8.837313,
            8.853979,
            8.870645,
            8.887311,
            8.903977,
            8.920643,
            8.937309,
            8.953975,
            8.970641,
            8.987307,
            9.003973,
            9.020639,
            9.037305,
            9.053971,
            9.070637,
            9.087303,
            9.103969,
            9.120635,
            9.137301,
            9.153967,
            9.170633,
            9.187299,
            9.203965,
            9.220631,
            9.237297,
            9.253963,
            9.270629,
            9.287295,
            9.303961,
            9.320627,
            9.337293,
            9.353959,
            9.370625,
            9.387291,
            9.403957,
            9.420623,
            9.437289,
            9.453955,
            9.470621,
            9.487287,
            9.503953,
            9.520619,
            9.537285,
            9.553951,
            9.570617,
            9.587283,
            9.603949,
            9.620615,
            9.637281,
            9.653947,
            9.670613,
            9.687279,
            9.703945,
            9.720611,
            9.737277,
            9.753943,
            9.770609,
            9.787275,
            9.803941,
            9.820607,
            9.837273,
            9.853939,
            9.870605,
            9.887271,
            9.903937,
            9.920603,
            9.937269,
            9.953935,
            9.970601,
            9.987267,
            10.003933,
            10.020599,
            10.037265,
            10.053931,
            10.070597,
            10.087263,
            10.103929,
            10.120595,
            10.137261,
            10.153927,
            10.170593,
            10.187259,
            10.203925,
            10.220591,
            10.237257,
            10.253923,
            10.270589,
            10.287255,
            10.303921,
            10.320587,
            10.337253,
            10.353919,
            10.370585,
            10.387251,
            10.403917,
            10.420583,
            10.437249,
            10.453915,
            10.470581,
            10.487247,
            10.503913,
            10.520579,
            10.537245,
            10.553911,
            10.570577,
            10.587243,
            10.603909,
            10.620575,
            10.637241,
            10.653907,
            10.670573,
            10.687239,
            10.703905
        ]
    }

    handleFilterData = () => {
        // filter the signals
        if (this.dataLeft.length > 0){
            lowPassFilter(this.dataLeft, 10, this.frameRate,1)
        }

        if (this.dataRight.length > 0) {
            lowPassFilter(this.dataRight, 10, this.frameRate,1)
        }
    }

    handleFindPeaksinData = () => {

        //left High 
        if (this.dataLeft.length > 0){
            this.leftHigh = this.getPeaksIndexandValues(this.dataLeft, this.timeStampLeft, this.sliderLeftRef.current.value*this.frameRate)
            this.leftLow = this.getPeaksIndexandValuesNeg(this.dataLeft, this.timeStampLeft, this.sliderLeftRef.current.value*this.frameRate)
        } else {
            this.leftHigh.peaksValues = []
            this.leftHigh.peaksTimes = []
        }
        
        if (this.dataRight.length > 0) {
            this.rightHigh  = this.getPeaksIndexandValues(this.dataRight, this.timeStampRight, this.sliderRightRef.current.value*this.frameRate)
            this.rightLow = this.getPeaksIndexandValuesNeg(this.dataRight, this.timeStampRight, this.sliderRightRef.current.value*this.frameRate)
        } else {
            this.rightHigh.peaksValues = []
            this.rightHigh.peaksTimes = []
        }

        this.setState({revision : this.state.revision + 1})
    }

    getPeaksIndexandValues = (data, time, distance) => {
        let peaksIndex = filter_by_distance(find_local_maxima(data), data, distance)
        let peaksValues = peaksIndex.map(i => data[i])
        let peaksTimes = peaksIndex.map(i => time[i])
        return {peaksValues, peaksTimes}
    }

    getPeaksIndexandValuesNeg = (data, time, distance) => {
        let dataNeg = data.map(val => (-1*val))
        let peaksIndex = filter_by_distance(find_local_maxima(dataNeg), dataNeg, distance)
        let peaksValues = peaksIndex.map(i => data[i])
        let peaksTimes = peaksIndex.map(i => time[i])
        return {peaksValues, peaksTimes}
    }

    handleSliderChange = (event) =>{
        if (event.target.className === 'interact-slider-left'){
            if (this.dataLeft.length > 0){
                this.leftHigh = this.getPeaksIndexandValues(this.dataLeft, this.timeStampLeft, event.target.value*this.frameRate)
                this.leftLow = this.getPeaksIndexandValuesNeg(this.dataLeft, this.timeStampLeft, event.target.value*this.frameRate)
            }
            this.labelLeft.current.innerHTML = event.target.value + 's'
            
        } else {
            if (this.dataRight.length > 0) {
                this.rightHigh  = this.getPeaksIndexandValues(this.dataRight, this.timeStampRight, event.target.value*this.frameRate)
                this.rightLow = this.getPeaksIndexandValuesNeg(this.dataRight, this.timeStampRight, event.target.value*this.frameRate)
            }
            this.labelRight.current.innerHTML = event.target.value + 's'
        }

        // console.log(this.leftHigh, this.rightHigh)

        this.setState({revision : this.state.revision + 1})

        
    }

    handleClickonPlot = (data) => {

        if (!this.state.isMarkUp) {
            // see if they click on a peak -- Right
            if (data.points[0].data.name === 'Right Hand Peaks High') {
                if ((this.rightHigh.peaksValues.some(e => e === data.points[0].y)) &&(this.rightHigh.peaksTimes.some(e => e === data.points[0].x))) {  
                    this.selectedPointRight = this.handleSelectElementfromArray(this.rightHigh.peaksValues, this.rightHigh.peaksTimes, data.points[0].x, data.points[0].data.name) 
                } 
            }

            if (data.points[0].data.name === 'Right Hand Peaks Low') {
                if ((this.rightLow.peaksValues.some(e => e === data.points[0].y)) && (this.rightLow.peaksTimes.some(e => e === data.points[0].x))) { 
                    this.selectedPointRight = this.handleSelectElementfromArray(this.rightLow.peaksValues, this.rightLow.peaksTimes, data.points[0].x, data.points[0].data.name)
                } 
            }

            if (data.points[0].data.name === 'Left Hand Peaks High') {
                if ((this.leftHigh.peaksValues.some(e => e === data.points[0].y)) && (this.leftHigh.peaksTimes.some(e => e === data.points[0].x))) {  
                    this.selectedPointLeft = this.handleSelectElementfromArray(this.leftHigh.peaksValues, this.leftHigh.peaksTimes, data.points[0].x, data.points[0].data.name) 
                } 
            }

            if (data.points[0].data.name === 'Left Hand Peaks Low') {
                if ((this.leftLow.peaksValues.some(e => e === data.points[0].y)) && (this.leftLow.peaksTimes.some(e => e === data.points[0].x))) { 
                    this.selectedPointLeft = this.handleSelectElementfromArray(this.leftLow.peaksValues, this.leftLow.peaksTimes, data.points[0].x, data.points[0].data.name)
                } 
            }
        
            this.setState({revision : this.state.revision + 1})
        } 

        if (this.state.isAddNewPeakHigh) {
      
            if (data.points[0].data.name === 'Right Hand') {
                this.rightHigh.peaksValues.push(data.points[0].y)
                this.rightHigh.peaksTimes.push(data.points[0].x)
            } 

            if (data.points[0].data.name === 'Left Hand'){
                this.leftHigh.peaksValues.push(data.points[0].y)
                this.leftHigh.peaksTimes.push(data.points[0].x)
            }
            
            this.setState({revision : this.state.revision + 1})
        }

        if (this.state.isAddNewPeakLow) {

            if (data.points[0].data.name === 'Right Hand') {
                this.rightLow.peaksValues.push(data.points[0].y)
                this.rightLow.peaksTimes.push(data.points[0].x)
            } 

            if (data.points[0].data.name === 'Left Hand'){
                this.leftLow.peaksValues.push(data.points[0].y)
                this.leftLow.peaksTimes.push(data.points[0].x)
            }
            
            this.setState({revision : this.state.revision + 1})
        }

    }

    handleSelectElementfromArray = (arrayValues, arrayTimes, element, name) => {

        if (!this.state.isMarkUp) //No mark up
        { 
            this.setState({isMarkUp : true})

            const idx = arrayTimes.indexOf(element)  
            const peaksValues =  [arrayValues[idx]]
            const peaksTimes = [arrayTimes[idx]]
            return {peaksValues, peaksTimes, idx, name}  
        }
    }

    handleClick = (event) => {
        var item = null
        var fileName = null
        switch (event.target.value) {
            case 'savesignals':
                 item = {dataRight : this.dataRight,
                             timeRight : this.timeStampRight, 
                             dataLeft : this.dataLeft, 
                             timeLeft : this.timeStampLeft}
                 fileName = this.fileName.split(".")[0]+'-signals.json';
                 this.handleSave(item,fileName)
                break;
            case 'savepeaks':
                item =     {peaksRight : {Peaks : {data : this.rightHigh.peaksValues,
                                                       time : this.rightHigh.peaksTimes} ,
                                          Valleys  : {data : this.rightLow.peaksValues,
                                                       time : this.rightLow.peaksTimes}},
                            peaksLeft  : {Peaks : {data : this.leftHigh.peaksValues,
                                                       time : this.leftHigh.peaksTimes} ,
                                          Valleys : {data : this.leftLow.peaksValues,
                                                       time : this.leftLow.peaksTimes}}}
                fileName = this.fileName.split(".")[0]+'-peaks.json';
                this.handleSave(item,fileName)
                break;
            case 'loadsignals':
                this.inputFile.current.click();
                break;
                break;
            default:
                break
        }

    }

    handleSave = (saveItem, fileName ) => {

        var blob = new Blob([JSON.stringify(saveItem)], {type: 'text/plain'});
        const url = URL.createObjectURL(blob);
        var a = document.createElement('a');
        //a.style.display = 'none';
        a.target = '_blank';
        a.type = 'button';
        a.href = url;
        a.download = fileName; 
        document.body.appendChild(a);
        a.click(function (event){
            event.preventDefault();
        });
        document.body.removeChild(a);
        window.URL.revokeObjectURL(url);
    }

    handleFileUpload = (event) => {
        const file = event.target.files[0];

        let reader = new FileReader();
        reader.onload = (e) => {
            var data = JSON.parse(e.target.result)
            this.dataLeft = data.dataLeft;
            this.timeStampLeft = data.timeLeft
            this.dataRight = data.dataRight
            this.timeStampRight = data.timeRight

            const tempA = this.timeStampLeft.slice(1)
            const tempB = this.timeStampLeft.slice(0,-1)
            var diff = tempA.map((value,index) => value - tempB[index])
            this.frameRate = 1/average(diff)

            this.handleFilterData()
            this.handleFindPeaksinData()
            //console.log(e.target.results['dataRight'])
        }

        // reader.onloadstart = (e) => {
        //     //this.videoRef.current.poster = 'loading-gif2.gif'
        //     this.loadButtonTag.current.disabled = true;
        //     this.processVideoButtonTag.current.disabled = true;
        //     this.playVideo.current.disabled = true;      
        // }
        // reader.onloadend = (e) => {  
        //     this.waveSurferRef.current.load(this.videoRef.current);
        //     this.loadButtonTag.current.disabled = false;
        //     this.processVideoButtonTag.current.disabled = false;
        //     this.playVideo.current.disabled = false; 
        // };

        reader.onerror = function(event) {
            alert("Loading Failed");
            console.log(event.target.error);
        };
        reader.readAsText(file);
        this.setState({fileName : file.name})

    }

    render () {
        return(

            <div className="container">
            <center>
            <div className="process-button">
                    <input type='file' id='file' ref={this.inputFile} onChange={this.handleFileUpload} style={{display: 'none'}}/>
                    <button style = {{ width:'25%', minWidth:'250px'}} type="button" value='loadsignals'  onClick={this.handleClick} disabled={false}>Load Signals</button>

                    <button style = {{ width:'45%', minWidth:'250px'}}  type="button" value='loadlandmarks'  onClick={this.handleClick} disabled={false}>Load Landmarks</button>
            </div>

            <div className="plotRight">

             <div className="sliderPlot"  >
                <label className="interact-label" style={{float: "left"}}>Minimum distance</label> 
                <label className='interact-slider-value' ref={this.labelRight} style={{float: "right"}}> 0.3s </label>
                <br/>
                <input className="interact-slider-right" type="range" min="0" max="3" step="0.1" defaultValue="0.3" id="slider" ref={this.sliderRightRef} onChange={this.handleSliderChange}  />
            </div>

            <Plot ref={this.plotRight} data ={[
                {
                x : this.timeStampRight,
                y : this.dataRight,
                name: 'Right Hand',
                type : 'scatter',
                mode : 'lines',
                marker : {color:'#1f77b4'}
                },
                {
                y : this.rightHigh.peaksValues,
                x : this.rightHigh.peaksTimes,
                name: 'Right Hand Peaks High',
                type:'scatter',
                mode:'markers',
                marker : {  size: 10,
                            color:'#41337A'}
                },
                {
                y : this.rightLow.peaksValues,
                x : this.rightLow.peaksTimes,
                name: 'Right Hand Peaks Low',
                type:'scatter',
                mode:'markers',
                marker : {  size: 10,
                            color:'#76B041'}
                },
                {
                y : this.selectedPointRight.peaksValues,
                x : this.selectedPointRight.peaksTimes,
                name: 'Right Hand selected Point',
                type:'scatter',
                mode:'markers',
                marker :{  size: 13,
                            color:'#01FDF6'}
                }
            ]}
            layout = {{height: 400, xaxis : {title: 'Time [s]'}, yaxis : {title: 'Distance [m]'}, title: 'Right Hand', font: {
        family: 'Verdana, Geneva, sans-serif;',
        size: 16,
        color: '#7f7f7f'
      },showlegend: false,
      datarevision : this.state.revision}} 
        revision = {this.state.revision}
        onClick={(data) => this.handleClickonPlot(data)}
      />
      </div>
      <br/>
      <div className="plotRight">
        <div className="sliderPlot"  >
                <label className="interact-label" style={{float: "left"}}>Minimum distance</label> 
                <label className='interact-slider-value' ref={this.labelLeft} style={{float: "right"}}> 0.3s </label>
                <br/>
                <input className="interact-slider-left" type="range" min="0" max="3" step="0.1" defaultValue="0.3" id="slider" ref={this.sliderLeftRef} onChange={this.handleSliderChange}  />
            </div>
        <Plot ref={this.plotLeft} data ={[
                {
                x : this.timeStampLeft,
                y : this.dataLeft,
                name: 'Left Hand',
                type : 'scatter',
                mode : 'lines',
                marker : {color:'#1f77b4'}
                },
                {
                y : this.leftHigh.peaksValues,
                x : this.leftHigh.peaksTimes,
                name: 'Left Hand Peaks High',
                type:'scatter',
                mode:'markers',
                marker : {  size: 10,
                            color:'#41337A'}
                },
                {
                y : this.leftLow.peaksValues,
                x : this.leftLow.peaksTimes,
                name: 'Left Hand Peaks Low',
                type:'scatter',
                mode:'markers',
                marker : {  size: 10,
                            color:'#76B041'}
                },
                {
                y : this.selectedPointLeft.peaksValues,
                x : this.selectedPointLeft.peaksTimes,
                name: 'Left Hand selected Point',
                type:'scatter',
                mode:'markers',
                marker : {  size: 13,
                            color:'#01FDF6'}
                }
            ]}
            layout = {{height: 400, xaxis : {title: 'Time [s]'}, yaxis : {title: 'Distance [m]'}, title: 'Left Hand', font: {
        family: 'Verdana, Geneva, sans-serif;',
        size: 16,
        color: '#7f7f7f'
      },
      showlegend: false,
      datarevision : this.state.revision }} 
      revision = {this.state.revision}
      onClick={(data) => this.handleClickonPlot(data)}
      />



            </div>

            
            <div className="process-button">


            {/* <div className="slider" >
                <label className="interact-label" style={{float: "left"}}>Minimum distance</label> 
                <label className='interact-slider-value' style={{float: "right"}}> 0.5 </label>
                <br/>
                <input className="interact-slider" type="range" min="0" max="10" defaultValue="0" id="slider" ref={this.sliderRef} onChange={this.handleSliderChange}  />
            </div> */}

                    <button style = {{ width:'45%', minWidth:'250px'}}  type="button" value='savesignals'  onClick={this.handleClick} disabled={false}>Save Signals</button>
                    <button style = {{ width:'45%', minWidth:'250px'}}  type="button" value='savepeaks'  onClick={this.handleClick} disabled={false}>Save Peaks</button> <br/>
                    <button style = {{ width:'45%', minWidth:'250px'}}  type="button" value='savelandmarks'  onClick={this.handleClick} disabled={false}>Save Landmakrs</button> <br/>
                    <button style = {{ width:'45%', minWidth:'250px'}}  type="button" value='saveeverything' onClick={this.handleClick} disabled={false}>Save Everything</button>

            </div>

            
              </center>
            </div>

            

        );
    }
}

export default DataAnalysis;